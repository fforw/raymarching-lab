{"version":3,"sources":["webpack://Demo/webpack/bootstrap","webpack://Demo/./src/index.js","webpack://Demo/./src/mandala.vert","webpack://Demo/./src/mandala.frag"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Math","sqrt","PI","canvas","gl","u_time","u_resolution","u_mouse","mouseDown","startX","startY","config","width","height","mouseX","mouseY","main","time","f","uniform1f","uniform2f","uniform4f","drawElements","TRIANGLES","indices","length","UNSIGNED_SHORT","requestAnimationFrame","canvasBounds","vertices","resize","ev","window","innerWidth","innerHeight","viewport","onMouseMove","clientX","left","self","pageXOffset","clientY","top","pageYOffset","onMouseDown","onMouseUp","onload","document","getElementById","vertex_buffer","getContext","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","Index_Buffer","ELEMENT_ARRAY_BUFFER","Uint16Array","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragShader","FRAGMENT_SHADER","error","getShaderParameter","COMPILE_STATUS","console","getShaderInfoLog","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getUniformLocation","useProgram","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","clearColor","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","addEventListener","getBoundingClientRect","getProgramInfoLog"],"mappings":"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","file":"bundle-main-8b95a6bfbea02a51887e.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","// noinspection ES6UnusedImports\nimport STYLE from \"./style.css\"\n\nimport mandalaFragmentShader from \"./mandala.frag\"\nimport mandalaVertexShader from \"./mandala.vert\"\nimport loadImage from \"./loadImage\";\n\nconst PHI = (1 + Math.sqrt(5)) / 2;\nconst TAU = Math.PI * 2;\nconst DEG2RAD_FACTOR = TAU / 360;\n\nconst config = {\n    width: 0,\n    height: 0\n};\n\nlet canvas, gl;\n\n\n// uniform: current time\nlet u_time;\n\nlet u_resolution;\n\nlet u_mouse;\n\nlet mouseX = 0, mouseY = 0, mouseDown, startX, startY;\n\nfunction main(time)\n{\n    const f = mouseDown ? 1 : -1;\n\n    // update uniforms\n    gl.uniform1f(u_time, time / 1000.0);\n    gl.uniform2f(u_resolution, config.width, config.height);\n    gl.uniform4f(u_mouse, mouseX, config.height - mouseY, startX * f, (config.height - startY) * f);\n\n    // Draw the quad\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);\n\n    requestAnimationFrame(main);\n}\n\n\nconst vertices = [\n    -1, 1, 0.0,\n    -1, -1, 0.0,\n    1, -1, 0.0,\n    1, 1, 0.0\n];\n\nconst indices = [3, 2, 1, 3, 1, 0];\n\nfunction resize(ev)\n{\n    const width = (window.innerWidth) & ~15;\n    const height = (window.innerHeight) | 0;\n\n    config.width = width;\n    config.height = height;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    mouseX = width/2;\n    mouseY = height/2;\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n}\n\nwindow.onload = () => {\n\n    canvas = document.getElementById(\"screen\");\n\n    const width = (window.innerWidth) & ~15;\n    const height = (window.innerHeight) | 0;\n\n    config.width = width;\n    config.height = height;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    mouseX = width/2;\n    mouseY = height/3;\n\n    gl = canvas.getContext(\"webgl2\");\n\n    /*========== Defining and storing the geometry =========*/\n\n    // Create an empty buffer object to store vertex buffer\n    const vertex_buffer = gl.createBuffer();\n\n    // Bind appropriate array buffer to it\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n\n    // Pass the vertex data to the buffer\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n    // Unbind the buffer\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    // Create an empty buffer object to store Index buffer\n    const Index_Buffer = gl.createBuffer();\n\n    // Bind appropriate array buffer to it\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Index_Buffer);\n\n    // Pass the vertex data to the buffer\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n\n    // Unbind the buffer\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n    /*====================== Shaders =======================*/\n\n    // Create a vertex shader object\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\n\n    // Attach vertex shader source code\n    gl.shaderSource(vertShader, mandalaVertexShader);\n\n    // Compile the vertex shader\n    gl.compileShader(vertShader);\n\n    // Create fragment shader object\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    // Attach fragment shader source code\n    gl.shaderSource(fragShader, mandalaFragmentShader);\n\n    // Compile the fragment shader\n    gl.compileShader(fragShader);\n\n    let error = false;\n    if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS))\n    {\n        console.error(\"Invalid vertex shader\", gl.getShaderInfoLog(vertShader));\n        error = true;\n    }\n    if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS))\n    {\n        console.error(\"Invalid fragment shader\", gl.getShaderInfoLog(fragShader));\n        error = true;\n    }\n\n    if (error)\n    {\n        return;\n    }\n\n    // Create a shader program object to\n    // store the combined shader program\n    const shaderProgram = gl.createProgram();\n\n    // Attach a vertex shader\n    gl.attachShader(shaderProgram, vertShader);\n\n    // Attach a fragment shader\n    gl.attachShader(shaderProgram, fragShader);\n\n    // Link both the programs\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))\n    {\n        console.error(gl.getProgramInfoLog(shaderProgram));\n        return;\n    }\n\n    // get uniform locations\n    u_time = gl.getUniformLocation(shaderProgram, \"u_time\");\n    u_resolution = gl.getUniformLocation(shaderProgram, \"u_resolution\");\n    u_mouse = gl.getUniformLocation(shaderProgram, \"u_mouse\");\n\n    // Use the combined shader program object\n    gl.useProgram(shaderProgram);\n\n    /* ======= Associating shaders to buffer objects =======*/\n\n    // Bind vertex buffer object\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n\n    // Bind index buffer object\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Index_Buffer);\n\n    // Get the attribute location\n    const coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n\n    // Point an attribute to the currently bound VBO\n    gl.vertexAttribPointer(coord, 3, gl.FLOAT, false, 0, 0);\n\n    // Enable the attribute\n    gl.enableVertexAttribArray(coord);\n\n    // Clear the canvas\n    gl.clearColor(0,0,0,1);\n\n    // Enable the depth test\n    gl.enable(gl.DEPTH_TEST);\n\n    // Clear the color buffer bit\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Set the view port\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    window.addEventListener(\"resize\", resize, true);\n    canvas.addEventListener(\"mousemove\", onMouseMove, true);\n    canvas.addEventListener(\"mousedown\", onMouseDown, true);\n    document.addEventListener(\"mouseup\", onMouseUp, true);\n\n    canvasBounds = document.getElementById(\"screen\").getBoundingClientRect();\n\n    requestAnimationFrame(main);\n};\n\n\n// Get the container element's bounding box\nlet canvasBounds;\n\n// Apply the mouse event listener\n\nfunction onMouseMove(ev)\n{\n    if (mouseDown)\n    {\n        mouseX = (ev.clientX - canvasBounds.left) + self.pageXOffset;\n        mouseY = (ev.clientY - canvasBounds.top) + self.pageYOffset;\n    }\n}\n\nfunction onMouseDown(ev)\n{\n    mouseDown = true;\n    startX = (ev.clientX - canvasBounds.left) + self.pageXOffset;\n    startY = (ev.clientY - canvasBounds.top) + self.pageYOffset;\n    mouseX = startX;\n    mouseY = startY;\n}\n\nfunction onMouseUp(ev)\n{\n    mouseDown = false;\n}\n\n","export default \"#define GLSLIFY 1\\nattribute vec3 coordinates;\\nvoid main(void) {\\n    gl_Position = vec4(coordinates, 1.0);\\n}\\n\";","export default \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float u_time;\\nuniform vec2 u_resolution;\\nuniform vec4 u_mouse;\\n\\nconst float pi = 3.141592653589793;\\nconst float tau = pi * 2.0;\\nconst float hpi = pi * 0.5;\\nconst float phi = (1.0+sqrt(5.0))/2.0;\\n\\n// \\\"ShaderToy Tutorial - Ray Marching Primitives\\\"\\n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\\n//\\n// This shader is part of a tutorial on YouTube\\n// https://youtu.be/Ff0jJyyiVyw\\n\\n#define MAX_STEPS 100\\n#define MAX_DIST 1000.\\n#define SURF_DIST .001\\n\\nfloat snoise(vec3 v);\\n\\nmat2 Rot(float a) {\\n    float s = sin(a);\\n    float c = cos(a);\\n    return mat2(c, -s, s, c);\\n}\\n\\nfloat smin(float a, float b, float k) {\\n    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);\\n    return mix(b, a, h) - k*h*(1.0-h);\\n}\\n\\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\\n    vec3 ab = b-a;\\n    vec3 ap = p-a;\\n\\n    float t = dot(ab, ap) / dot(ab, ab);\\n    t = clamp(t, 0., 1.);\\n\\n    vec3 c = a + t*ab;\\n\\n    return length(p-c)-r;\\n}\\n\\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\\n    vec3 ab = b-a;\\n    vec3 ap = p-a;\\n\\n    float t = dot(ab, ap) / dot(ab, ab);\\n    //t = clamp(t, 0., 1.);\\n\\n    vec3 c = a + t*ab;\\n\\n    float x = length(p-c)-r;\\n    float y = (abs(t-.5)-.5)*length(ab);\\n    float e = length(max(vec2(x, y), 0.));\\n    float i = min(max(x, y), 0.);\\n\\n    return e+i;\\n}\\n\\nfloat sdSphere( vec3 p, float s )\\n{\\n    return length(p)-s;\\n}\\n\\nfloat sdTorus(vec3 p, vec2 r) {\\n    float x = length(p.xz)-r.x;\\n    return length(vec2(x, p.y))-r.y;\\n}\\n\\nfloat sdRoundBox( vec3 p, vec3 b, float r )\\n{\\n    vec3 q = abs(p) - b;\\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\\n}\\n\\nfloat dBox(vec3 p, vec3 s) {\\n    p = abs(p)-s;\\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\\n}\\n\\nvec2 minId(vec2 curr, float d, float id)\\n{\\n    if (d < curr.x)\\n    {\\n        curr.x = d;\\n        curr.y = id;\\n    }\\n\\n    return curr;\\n}\\n\\nvec2 sminId(vec2 curr, float d, float id)\\n{\\n    if (d < curr.x)\\n    {\\n        curr.x = smin(curr.x, d, 0.5);\\n        curr.y = id;\\n    }\\n\\n    return curr;\\n}\\n\\nfloat displacement(vec3 p)\\n{\\n    return 1.0 + snoise(p);\\n}\\n\\nfloat onion( in float d, in float h )\\n{\\n    return abs(d)-h;\\n}\\n\\nvec2 GetDist(vec3 p) {\\n\\n    float t = u_time;\\n\\n    // ground plane\\n    float pd = p.y;\\n\\n    vec2 result = vec2(1e6, 0);\\n\\n    vec3 tBox = vec3(2,1,2);\\n    vec3 pBox = p - tBox;// translate\\n\\n    vec3 c = vec3(3.0, 4.0, 3.0);\\n    vec3 q = mod(pBox+0.5*c,c)-0.5*c;\\n    float rotate = sdRoundBox(q, vec3(0.8), 0.25);\\n\\n    result = minId(result, rotate, 2.0);\\n\\n    float r = 6.5 + sin(u_time * 0.5) * 3.5;\\n    float sphere = sdSphere(p, r);\\n\\n    float onion = onion(onion(onion(onion(sphere, 3.2), 1.6), 0.8), 0.4);\\n\\n    result.y = 0.5 + snoise(floor((pBox + c * 0.5)/c)) * 0.5;\\n\\n    if (-onion > result.x)\\n    {\\n        result.x = -onion;\\n        result.y = -result.y;\\n    }\\n\\n    //result = minId(result, pd, 1.0);\\n    //result = minId(result, sphere, 3.0);\\n\\n    return result;\\n}\\n\\nvec2 RayMarch(vec3 ro, vec3 rd) {\\n\\n    float dO=0.;\\n    float id = 0.0;\\n\\n    for (int i=0; i < MAX_STEPS; i++) {\\n        vec3 p = ro + rd*dO;\\n        vec2 result = GetDist(p);\\n        float dS = abs(result.x);\\n        dO += dS;\\n        id = result.y;\\n        if ( dO > MAX_DIST || dS < SURF_DIST)\\n            break;\\n    }\\n\\n    return vec2(dO, id);\\n}\\n\\nvec3 GetNormal(vec3 p) {\\n    float d = GetDist(p).x;\\n    vec2 e = vec2(.001, 0);\\n\\n    vec3 n = d - vec3(\\n        GetDist(p-e.xyy).x,\\n        GetDist(p-e.yxy).x,\\n        GetDist(p-e.yyx).x\\n    );\\n\\n    return normalize(n);\\n}\\n\\nfloat GetLight(vec3 p) {\\n    vec3 lightPos = vec3(3, 5, 4);\\n    vec3 l = normalize(lightPos-p);\\n    vec3 n = GetNormal(p);\\n\\n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\\n    float d = RayMarch(p+n*SURF_DIST*2., l).x;\\n\\n    if (p.y<.01 && d<length(lightPos-p)) dif *= .2;\\n\\n    return dif;\\n}\\n\\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\\n    vec3 f = normalize(l-p),\\n    r = normalize(cross(vec3(0, 1, 0), f)),\\n    u = cross(f, r),\\n    c = p+f*z,\\n    i = c + uv.x*r + uv.y*u,\\n    d = normalize(i-p);\\n    return d;\\n}\\n\\n////////////////////// NOISE\\n\\n//\\tSimplex 3D Noise\\n//\\tby Ian McEwan, Ashima Arts\\n//\\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\\n\\nfloat snoise(vec3 v){\\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n    // First corner\\n    vec3 i  = floor(v + dot(v, C.yyy) );\\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n    // Other corners\\n    vec3 g = step(x0.yzx, x0.xyz);\\n    vec3 l = 1.0 - g;\\n    vec3 i1 = min( g.xyz, l.zxy );\\n    vec3 i2 = max( g.xyz, l.zxy );\\n\\n    //  x0 = x0 - 0. + 0.0 * C\\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\\n\\n    // Permutations\\n    i = mod(i, 289.0 );\\n    vec4 p = permute( permute( permute(\\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n    // Gradients\\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\\n    float n_ = 1.0/7.0; // N=7\\n    vec3  ns = n_ * D.wyz - D.xzx;\\n\\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\\n\\n    vec4 x_ = floor(j * ns.z);\\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n    vec4 x = x_ *ns.x + ns.yyyy;\\n    vec4 y = y_ *ns.x + ns.yyyy;\\n    vec4 h = 1.0 - abs(x) - abs(y);\\n\\n    vec4 b0 = vec4( x.xy, y.xy );\\n    vec4 b1 = vec4( x.zw, y.zw );\\n\\n    vec4 s0 = floor(b0)*2.0 + 1.0;\\n    vec4 s1 = floor(b1)*2.0 + 1.0;\\n    vec4 sh = -step(h, vec4(0.0));\\n\\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n    vec3 p0 = vec3(a0.xy,h.x);\\n    vec3 p1 = vec3(a0.zw,h.y);\\n    vec3 p2 = vec3(a1.xy,h.z);\\n    vec3 p3 = vec3(a1.zw,h.w);\\n\\n    //Normalise gradients\\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n    p0 *= norm.x;\\n    p1 *= norm.y;\\n    p2 *= norm.z;\\n    p3 *= norm.w;\\n\\n    // Mix final noise value\\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n    m = m * m;\\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n    dot(p2,x2), dot(p3,x3) ) );\\n}\\n\\n//////// HSL ////////////////////\\n\\nfloat hue2rgb(float f1, float f2, float hue) {\\n    if (hue < 0.0)\\n    hue += 1.0;\\n    else if (hue > 1.0)\\n    hue -= 1.0;\\n    float res;\\n    if ((6.0 * hue) < 1.0)\\n    res = f1 + (f2 - f1) * 6.0 * hue;\\n    else if ((2.0 * hue) < 1.0)\\n    res = f2;\\n    else if ((3.0 * hue) < 2.0)\\n    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\\n    else\\n    res = f1;\\n    return res;\\n}\\n\\nvec3 hsl2rgb(vec3 hsl) {\\n    vec3 rgb;\\n\\n    if (hsl.y == 0.0) {\\n        rgb = vec3(hsl.z); // Luminance\\n    } else {\\n        float f2;\\n\\n        if (hsl.z < 0.5)\\n        f2 = hsl.z * (1.0 + hsl.y);\\n        else\\n        f2 = hsl.z + hsl.y - hsl.y * hsl.z;\\n\\n        float f1 = 2.0 * hsl.z - f2;\\n\\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\\n        rgb.g = hue2rgb(f1, f2, hsl.x);\\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\\n    }\\n    return rgb;\\n}\\n\\nvec3 hsl2rgb(float h, float s, float l) {\\n    return hsl2rgb(vec3(h, s, l));\\n}\\n\\nvoid main(void)\\n{\\n    vec2 uv = (gl_FragCoord.xy-.5*u_resolution.xy)/u_resolution.y;\\n    vec2 m = u_mouse.xy/u_resolution.xy;\\n\\n    vec3 col = vec3(0);\\n    vec3 ro = vec3(0, 4, -5);\\n    ro.yz *= Rot(-m.y+.5);\\n    ro.xz *= Rot(u_time*.3-m.x*6.2831);\\n\\n    vec3 rd = R(uv, ro, vec3(0, 0, 0), 0.5);\\n\\n    vec2 result = RayMarch(ro, rd);\\n\\n    float d = result.x;\\n\\n    if (d < MAX_DIST) {\\n        vec3 p = ro + rd * d;\\n        float dif = GetLight(p) / (d*d);\\n\\n        vec3 tone = hsl2rgb(\\n            fract(abs(result.y) + (result.y > 0.0 ? 0.5 : 0.0)),\\n            result.y > 0.0 ? 1.0 : 0.5,\\n            result.y > 0.0 ? 0.55 : 0.02\\n        );\\n\\n        tone.x = clamp(tone.x * 2.0, 0.0, 1.0);\\n\\n        col = vec3(dif)* tone;\\n\\n    }\\n\\n    col = pow(col, vec3(.25));// gamma correction\\n\\n    gl_FragColor = vec4(\\n        col,\\n        1.0\\n    );\\n}\\n\";"],"sourceRoot":""}