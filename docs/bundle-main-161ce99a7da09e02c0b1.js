var Demo=function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=2)}([function(n,e,t){},,function(n,e,t){"use strict";t.r(e);t(0);Math.sqrt(5),Math.PI;var r,o,a,i,c,l,s,f,u={width:0,height:0},v=0,d=0;function x(n){var e=l?1:-1;o.uniform1f(a,n/1e3),o.uniform2f(i,u.width,u.height),o.uniform4f(c,v,u.height-d,s*e,(u.height-f)*e),o.drawElements(o.TRIANGLES,h.length,o.UNSIGNED_SHORT,0),requestAnimationFrame(x)}var p,m=[-1,1,0,-1,-1,0,1,-1,0,1,1,0],h=[3,2,1,3,1,0];function y(n){var e=-16&window.innerWidth,t=0|window.innerHeight;u.width=e,u.height=t,r.width=e,r.height=t,v=e/2,d=t/2,o.viewport(0,0,r.width,r.height)}function g(n){l&&(v=n.clientX-p.left+self.pageXOffset,d=n.clientY-p.top+self.pageYOffset)}function b(n){l=!0,s=n.clientX-p.left+self.pageXOffset,f=n.clientY-p.top+self.pageYOffset,v=s,d=f}function z(n){l=!1}window.onload=function(){r=document.getElementById("screen");var n=-16&window.innerWidth,e=0|window.innerHeight;u.width=n,u.height=e,r.width=n,r.height=e,v=n/2,d=e/3;var t=(o=r.getContext("webgl2")).createBuffer();o.bindBuffer(o.ARRAY_BUFFER,t),o.bufferData(o.ARRAY_BUFFER,new Float32Array(m),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null);var l=o.createBuffer();o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,l),o.bufferData(o.ELEMENT_ARRAY_BUFFER,new Uint16Array(h),o.STATIC_DRAW),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,null);var s=o.createShader(o.VERTEX_SHADER);o.shaderSource(s,"#define GLSLIFY 1\nattribute vec3 coordinates;\nvoid main(void) {\n    gl_Position = vec4(coordinates, 1.0);\n}\n"),o.compileShader(s);var f=o.createShader(o.FRAGMENT_SHADER);o.shaderSource(f,'precision mediump float;\n#define GLSLIFY 1\n\nuniform float u_time;\nuniform vec2 u_resolution;\nuniform vec4 u_mouse;\n\nconst float pi = 3.141592653589793;\nconst float tau = pi * 2.0;\nconst float hpi = pi * 0.5;\nconst float phi = (1.0+sqrt(5.0))/2.0;\n\n// "ShaderToy Tutorial - Ray Marching Primitives"\n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/Ff0jJyyiVyw\n\n#define MAX_STEPS 100\n#define MAX_DIST 1000.\n#define SURF_DIST .001\n\nfloat snoise(vec3 v);\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5+0.5*(b-a)/k, 0., 1.);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n\n    vec3 c = a + t*ab;\n\n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n\n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n\n    vec3 c = a + t*ab;\n\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n\n    return e+i;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdBeam( vec3 p, vec3 c )\n{\n    return length(p.xz-c.xy)-c.z;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 minId(vec2 curr, float d, float id)\n{\n    if (d < curr.x)\n    {\n        curr.x = d;\n        curr.y = id;\n    }\n\n    return curr;\n}\n\nvec2 sminId(vec2 curr, float d, float id)\n{\n    if (d < curr.x)\n    {\n        curr.x = smin(curr.x, d, 0.5);\n        curr.y = id;\n    }\n\n    return curr;\n}\n\nfloat displacement(vec3 p)\n{\n    return 1.0 + snoise(p);\n}\n\nfloat onion( in float d, in float h )\n{\n    return abs(d)-h;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n    length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n    p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdBoundingBox( vec3 p, vec3 b, float e )\n{\n    p = abs(p  )-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n    length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n    length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n    length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nvec2 GetDist(vec3 p) {\n\n    float t = u_time;\n\n    // ground plane\n    float pd = p.y;\n\n    vec2 result = vec2(1e6, 0);\n\n    vec3 c = vec3(8.0, 8.0, 8.0);\n    p = mod(p+0.5*c,c)-0.5*c;\n\n    float len = 3.6;\n    float radius = 0.25;\n\n    {\n        float zBeam = sdHexPrism(p, vec2(radius,len));\n\n        result = minId(result, zBeam,  0.05/*0.5 + snoise(floor((pBox + c * 0.5)/c)) * 0.5*/);\n    }\n\n    {\n        vec3 xPos = p;\n        xPos.xz *= Rot(tau/4.0);\n        float xBeam = sdHexPrism(xPos, vec2(radius,len));\n        result = minId(result, xBeam,  0.6/*0.5 + snoise(floor((pBox + c * 0.5)/c)) * 0.5*/);\n    }\n\n    {\n        vec3 zPos = p;\n        zPos.zy *= Rot(tau/4.0);\n        float xBeam = sdHexPrism(zPos, vec2(radius,len));\n        result = minId(result, xBeam,  0.64/*0.5 + snoise(floor((pBox + c * 0.5)/c)) * 0.5*/);\n    }\n\n    result.x -=  0.1;\n\n    float sphere = sdBoundingBox( p , vec3(0.9), 0.1 ) - 0.1;\n\n    /*\nfloat opRound( in sdf3d primitive, float rad )\n{\n    return primitive(p) - rad\n}\n    */\n\n    result = minId(result, sphere, 0.1/*0.5 + snoise(floor((pBox + c * 0.5)/c)) * 0.5*/);\n\n    return result;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\n    float dO=0.;\n    float id = 0.0;\n\n    for (int i=0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        vec2 result = GetDist(p);\n        float dS = abs(result.x);\n        dO += dS;\n        id = result.y;\n        if ( dO > MAX_DIST || dS < SURF_DIST)\n            break;\n    }\n\n    return vec2(dO, id);\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x\n    );\n\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 10, -4.0 + u_time * 2.0 );\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n\n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).x;\n\n    //if (p.y<.01 && d<length(lightPos-p)) dif *= .2;\n\n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n    r = normalize(cross(vec3(0, 1, 0), f)),\n    u = cross(f, r),\n    c = p+f*z,\n    i = c + uv.x*r + uv.y*u,\n    d = normalize(i-p);\n    return d;\n}\n\n////////////////////// NOISE\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 );\n    vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n    dot(p2,x2), dot(p3,x3) ) );\n}\n\n//////// HSL ////////////////////\n\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n    hue += 1.0;\n    else if (hue > 1.0)\n    hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n    res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n    res = f2;\n    else if ((3.0 * hue) < 2.0)\n    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n    res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n\n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n\n        if (hsl.z < 0.5)\n        f2 = hsl.z * (1.0 + hsl.y);\n        else\n        f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n\n        float f1 = 2.0 * hsl.z - f2;\n\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }\n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\nvoid main(void)\n{\n    vec2 uv = (gl_FragCoord.xy-.5*u_resolution.xy)/u_resolution.y;\n    vec2 m = u_mouse.xy/u_resolution.xy;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(4.0+ sin(u_time * 0.7) * 3.0, 4.0 + cos(u_time * 1.1) * 3.0, -4.0 + u_time * 8.0);\n//    ro.yz *= Rot(-m.y+.5);\n//    ro.xz *= Rot(-m.x*6.2831);\n\n    vec3 lookAt = vec3(0,0,-1);\n\n    lookAt.yz *= Rot(-m.y+.5);\n    lookAt.xz *= Rot(-m.x * tau);\n\n    vec3 rd = R(uv, ro, ro + lookAt, 1.0);\n\n    vec2 result = RayMarch(ro, rd);\n\n    float d = result.x;\n\n    if (d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        float dif = GetLight(p) / d;\n\n        vec3 tone = hsl2rgb(\n            fract(abs(result.y)),\n            1.0,\n            0.5\n        );\n\n        tone.x = clamp(tone.x * 2.0, 0.0, 1.0);\n\n        col = vec3(dif)* tone;\n\n    }\n\n    col = pow(col, vec3(.4545));\t// gamma correction\n\n    gl_FragColor = vec4(\n        col,\n        1.0\n    );\n}\n'),o.compileShader(f);var _=!1;if(o.getShaderParameter(s,o.COMPILE_STATUS)||(console.error("Invalid vertex shader",o.getShaderInfoLog(s)),_=!0),o.getShaderParameter(f,o.COMPILE_STATUS)||(console.error("Invalid fragment shader",o.getShaderInfoLog(f)),_=!0),!_){var S=o.createProgram();if(o.attachShader(S,s),o.attachShader(S,f),o.linkProgram(S),o.getProgramParameter(S,o.LINK_STATUS)){a=o.getUniformLocation(S,"u_time"),i=o.getUniformLocation(S,"u_resolution"),c=o.getUniformLocation(S,"u_mouse"),o.useProgram(S),o.bindBuffer(o.ARRAY_BUFFER,t),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,l);var R=o.getAttribLocation(S,"coordinates");o.vertexAttribPointer(R,3,o.FLOAT,!1,0,0),o.enableVertexAttribArray(R),o.clearColor(0,0,0,1),o.enable(o.DEPTH_TEST),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT),o.viewport(0,0,r.width,r.height),window.addEventListener("resize",y,!0),r.addEventListener("mousemove",g,!0),r.addEventListener("mousedown",b,!0),document.addEventListener("mouseup",z,!0),p=document.getElementById("screen").getBoundingClientRect(),requestAnimationFrame(x)}else console.error(o.getProgramInfoLog(S))}}}]);
//# sourceMappingURL=bundle-main-161ce99a7da09e02c0b1.js.map